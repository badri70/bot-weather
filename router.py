from aiogram import Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from service import get_weather, get_weather_forecast


router = Router()
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ')],
        [KeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ')],
        [KeyboardButton(text='–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π')],
        [KeyboardButton(text='–£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã')]
    ],
    resize_keyboard=True
)


class WeatherState(StatesGroup):
    city = State()
    forecast = State()


class NotificationState(StatesGroup):
    city = State()


user_notifications = {}


@router.message(lambda message: message.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ')
async def set_notification_city(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.")
    await state.set_state(NotificationState.city)


@router.message(NotificationState.city)
async def save_notification_city(message: Message, state: FSMContext):
    city_name = message.text.strip()
    user_notifications[message.from_user.id] = city_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name.title()} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã! üîî",
        reply_markup=keyboard
    )
    await state.clear()


async def send_weather_notification():
    for user_id, city in user_notifications.items():
        weather_text = await get_weather(city)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞
        try:
            await router.bot.send_message(user_id, f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city.title()}:\n\n{weather_text}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@router.message(CommandStart())
async def start(message: Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø ‚Äî –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã! ‚òÄÔ∏èüåß\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å:\n\n"
        "üå° –¢–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–ª–∞–∂–Ω–æ—Å—Ç—å –∏ –≤–µ—Ç–µ—Ä –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.\n"
        "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.\n"
        "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.\n"
        "üìç –ë—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤ inline-—Ä–µ–∂–∏–º–µ.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n"
        "- –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π\n"
        "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ\n"
        "- –£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
    )
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)


@router.message(lambda message: message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ')
async def weather(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —è –º–æ–≥ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∞—Å.')
    await state.set_state(WeatherState.city)


@router.message(WeatherState.city)
async def fetch_current_weather(message: Message, state: FSMContext):
    city_name = message.text.strip()
    if not city_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: `/weather –ú–æ—Å–∫–≤–∞`")
        return

    weather_text = await get_weather(city_name)
    await message.answer(weather_text)
    await state.clear()


@router.message(lambda message: message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π')
async def forecast(message: Message, state: FSMContext):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —è –º–æ–≥ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∞—Å.')
    await state.set_state(WeatherState.forecast)


@router.message(WeatherState.forecast)
async def fetch_forecast_weather(message: Message, state: FSMContext):
    city_name = message.text.strip()
    if not city_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: `/weather –ú–æ—Å–∫–≤–∞`")
        return

    weather_text = await get_weather_forecast(city_name)
    await message.answer(weather_text)
    await state.clear()


@router.message(lambda message: message.text == '–£–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã')
async def show_commands(message: Message):
    commands_text = (
        "–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n"
        "- –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ üå°\n"
        "- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π üìÖ\n"
        "- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ üîî\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π."
    )
    await message.answer(commands_text)
